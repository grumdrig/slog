target snake

macro x(i) i % D
macro y(i) i / D

func clear(c) {
	var s = 0
	while s < .Length {
		if c == .(Head + s) { return 0 }
		s += 1
	}
	return 1
}

macro northclear() y(.Head) > 0   and clear(.Head - D)
macro eastclear()  x(.Head) < D-1 and clear(.Head + 1)
macro southclear() y(.Head) < D-1 and clear(.Head + D)
macro westclear()  x(.Head) > 0   and clear(.Head - 1)

func go(goal) {
	if .Head == goal { return 0 }
	if      x(.Head) < x(goal) and eastclear()  { east() }
	else if x(.Head) > x(goal) and westclear()  { west() }
	else if y(.Head) < y(goal) and southclear() { south() }
	else if y(.Head) > y(goal) and northclear() { north() }
	else if eastclear()  { east() }
	else if westclear()  { west() }
	else if southclear() { south() }
	else                 { north() }
	if .Head == goal { return 0 }
	return 1
}

macro go2(x, y) go(x + y * D)


while 1 {
	while go(.Food) {}
	/* The following attempts to last longer by stretching out around the edges
	   but it isn't really effective
	var goal = y(.Head)
	while go2(0,   goal) {}
	while go2(0,   0) {}
	while go2(D-1, 0) {}
	while go2(D-1, D-1) {}
	while go2(0,   D-1) {}
	*/
}