/////////////////////////////
// Test suite for compiler //
/////////////////////////////

macro checksp() { assert *(-2) == 4096 }

checksp()

var x

// Character literals

assert 'a' == 97
assert 'ab' == 97 * 256 + 98
assert "hello"[1] == 'e'

/////////////////
// Expressions //
/////////////////

// Using variables avoids precomputation
var v0 = 0
var v1 = 1
var v2 = 2
var v3 = 3
var v4 = 4
var v5 = 5
var v6 = 6
var v7 = 7
var v8 = 8
var v9 = 9
var v10 = 10
var v11 = 11
var v12 = 12

///////////////////
// Binary operators
///////////////////

// Arithmetic operators

assert 3 ** 2 == 9
assert 9 %% 2 == 3
assert 2 * 3 == 6
assert 6 / 2 == 3
assert 5 % 3 == 2
assert 5 + 3 == 8
assert 5 - 3 == 2
assert 5 << 2 == 20
assert 20 >> 2 == 5
assert 3 <? 6 == 3
assert 6 <? 3 == 3
assert 3 <? 3 == 3
assert 3 >? 6 == 6
assert 6 >? 3 == 6
assert 3 >? 3 == 3

assert v3 ** v2 == v9
assert v9 %% v2 == v3
assert v2 * v3 == v6
assert v6 / v2 == v3
assert v5 % v3 == v2
assert v5 + v3 == v8
assert v5 - v3 == v2
assert v2 << v2 == v8
assert v8 >> v2 == v2
assert v3 <? v6 == v3
assert v6 <? v3 == v3
assert v3 <? v3 == v3
assert v3 >? v6 == v6
assert v6 >? v3 == v6
assert v3 >? v3 == v3

// Comparison operators
assert 4 < 5
assert 4 <= 5
assert 5 <= 5
assert 6 > 5
assert 6 >= 5
assert 5 >= 5
assert 5 == 5
assert 4 != 5

assert v4 < v5
assert v4 <= v5
assert v5 <= v5
assert v6 > v5
assert v6 >= v5
assert v5 >= v5
assert v5 == v5
assert v4 != v5

// Bitwise operators

assert 6 & 3 == 2
assert 6 ^ 3 == 5
assert 6 | 3 == 7

assert v6 & v3 == v2
assert v6 ^ v3 == v5
assert v6 | v3 == v7

checksp()

// Logical operators

assert (6 && 3) == 3
assert !(0 && 3)
assert !(6 ^^ 3)
assert !(0 ^^ 0)
assert (0 ^^ 3) == 3
assert (2 ^^ 0) == 2
assert (6 || 3) == 6
assert (0 || 3) == 3
assert !(0 || 0)

checksp()

assert (v6 && v3) == v3
assert !(v0 && v3)
assert !(v6 ^^ v3)
assert !(v0 ^^ v0)
assert (v0 ^^ v3) == v3
assert (v2 ^^ v0) == v2
assert (v6 || v3) == v6
assert (v0 || v3) == v3
assert !(v0 || v0)

checksp()

// Shortcutting

x = 0
func incX(r) {
	x += 1
	return r
}
incX(0)
assert x == 1
assert incX(1) || incX(1)
assert x == 2
assert incX(1) && incX(1)
assert x == 4
assert !(incX(0) && incX(1))
assert x == 5

checksp()

// Assignment operators

assert (x = 3) == 3
assert (x += 4) == 7
assert (x -= 4) == 3
assert (x *= 4) == 12
assert (x /= 3) == 4
assert (x %= 3) == 1
assert (x <<= 3) == 8
assert (x >>= 1) == 4
assert (x |= 2) == 6
assert (x &= 3) == 2
assert (x ^= 7) == 5

assert (x = v3) == v3
assert (x += v4) == v7
assert (x -= v4) == v3
assert (x *= v4) == v12
assert (x /= v3) == v4
assert (x %= v3) == v1
assert (x <<= v3) == v8
assert (x >>= v1) == v4
assert (x |= v2) == v6
assert (x &= v3) == v2
assert (x ^= v7) == v5

checksp()

/////////////////////
// Prefix operators
/////////////////////

assert +6 == 6
assert +6 == + 6
assert +6 == +(6)
assert -6 == -(6)
assert ~7 == -8
assert ~-8 == 7
assert ~0 == -1
assert ~(~11) == 11
assert !6 == 0
assert !0 == 1
assert ! !0 == 0
assert ! ! -1 == 1

assert +v6 == v6
assert +v6 == + v6
assert +v6 == +(v6)
assert -v6 == -(v6)
assert ~v7 == -v8
assert ~-v8 == v7
assert ~v0 == -v1
assert ~(~v11) == v11
assert !v6 == v0
assert !v0 == v1
assert ! !v0 == v0
assert ! ! -v1 == v1

checksp()

////////////////////
// Functions
///////////////////

func factorial(n) (n <= 1 && 1) || n * factorial(n - 1)
assert factorial(3) == 6

macro plusFive(v) v + 5
assert plusFive(1) == 6
assert plusFive(v1) == v6

checksp()
